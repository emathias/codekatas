h1. Predictive Text (T9)

The introduction of short messaging services means many people now enter text
into mobile phones. As these phones do not have a key for every letter in the
alphabet, a compromise is being made to allow text to be entered, by putting
more than one letter on a single key. A typical layout is shown below: 

  1: N/A
  2: abc
  3: def
  4: ghi
  5: jkl
  6: mno
  7: pqrs
  8: tuv
  9: wxyz

Without predictive text, the user is required to press the appropriate key a
number of times for a particular letter to be shown. For example, the letter
'u' is produced by pressing the '8' key twice. This makes entering text a slow
and cumbersome process. The problem becomes even more apparent if we consider
the word 'hello'. With this method, the user must press 4, 4, 3, 3, 5, 5, 5,
then pause, then 5, 5, 5, 6, 6 and finally another 6.

Predictive Text (also known as T9) is a system that aims to reduce the number
of key pressings necessary to enter text. It aims to allow the user to press
each key only once. This allows the word 'hello' to be typed in 5 key presses
instead of 12. It does this by restricting the available words to those in a
dictionary.

Unfortunately, predictive text technology is not perfect. One problem concerns
what should happen when a given key sequence could correspond to more than one
word in the dictionary. For example, the sequence '228' could be interpreted as
'act', 'bat' or 'cat'. We call these words "predictive text clashes". Other
clashes well-known to users of predictive text include "of" and "me"; "home",
"gone" and "good", etc.

In these exercises, you are asked to develop a Java program for working with
predictive text. For simplicity, we assume that the user does not need
punctuation or numerals. Also, you need not attempt to order words by how
common they are. You may also limit your solutions to using only lower-case
letters.